{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"1c21c0e3-01d5-5eae-9cb8-9efed60a97db","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar themes = [prism, theme];\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  themes: themes,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Working with GraphQL Queries\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Goals:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dispell some myths\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Build a mental model for working with GraphQL schemas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Practice writing queries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Practice reading GraphQL Docs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Not focused on server-side tools + implementation today.\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Part 1: Intro\"), mdx(\"h2\", null, \"1. Background\"), mdx(\"h4\", null, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"https://graphql.org/\"\n  }), \"GraphQL: A Query Language for your API\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GraphQL is a specification for a JSON-based data protocol\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2 parts:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Schema-Definition\"), \" (Server Side): Define a typed schema for the JSON your server provides\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Query Language\"), \" (Client Side): Request document fields and specify parameters\")))), mdx(\"hr\", null), mdx(Split, {\n    style: {\n      textAlign: \"left\",\n      alignItems: \"flex-start\"\n    },\n    mdxType: \"Split\"\n  }, mdx(\"div\", {\n    style: {\n      textAlign: \"left\"\n    }\n  }, mdx(\"h2\", null, \"2. Myths + Misconceptions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Graph\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"QL\"), \" != S\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"QL\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Despite having \\\"Query Language\\\" in the name, the query language is much simpler than something like SQL.\")), mdx(\"h5\", null, \"because...\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Server declares available fields (via a Schema)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clients can only request items from these available fields\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No concepts like joins, unions, CTEs, etc etc\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Doesn't really relate to Graph Databases either\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\"JSON Filtering and Parameterization DSL\\\" would be a better name but does not sound as trendy\"))), mdx(\"div\", {\n    style: {\n      paddingLeft: '20px'\n    }\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"type User {\\n  login: String!\\n  location: String\\n  name: String\\n}\\ntype Query {\\n  viewer: User\\n}\\n\\n\\nquery {\\n  viewer {\\n    login\\n  }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"vs...\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"select username from users where id = 1234;\\n\")))), mdx(\"hr\", null), mdx(Split, {\n    style: {\n      textAlign: \"left\",\n      alignItems: \"flex-start\"\n    },\n    mdxType: \"Split\"\n  }, mdx(\"div\", null, mdx(\"h2\", null, \"3. JSON + HTTP under the hood\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GraphQL requests are sent via HTTP\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Queries are sent as strings (usually via HTTP POST body) and parsed by the server\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Returned data is sent as JSON\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Query Language filters fields and provides arguments\"))), mdx(\"div\", null, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query {\\n  viewer {\\n    login\\n  }\\n}\\n\")), mdx(\"p\", null, \"Equals:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"curl 'https://api.github.com/graphql\\n  -H 'Content-Type: application/json'\\n  --data '{\\\"query\\\":\\\"query {viewer {login}}\\\",\\n           \\\"variables\\\":{}}}'\\n\\n(plus a bunch of headers)\\n\")), mdx(\"p\", null, \"And gets:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\\"data\\\": {\\\"viewer\\\": {\\\"login\\\": \\\"worace\\\"}}}\\n\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"4. Query Syntax =~ JSON - Fields + Arguments\"), mdx(Split, {\n    style: {\n      textAlign: \"left\",\n      alignItems: \"flex-start\",\n      fontSize: \"22px\"\n    },\n    mdxType: \"Split\"\n  }, mdx(\"div\", {\n    style: {\n      padding: \"2em\"\n    }\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query {\\n  viewer {\\n    login\\n    location\\n    name\\n    repositories(first:2) {\\n      nodes {\\n        name\\n      }\\n    }\\n  }\\n}\\n\"))), mdx(\"div\", {\n    style: {\n      padding: \"2em\"\n    }\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"viewer\\\": {\\n      \\\"login\\\": \\\"worace\\\",\\n      \\\"location\\\": \\\"Los Angeles, CA\\\",\\n      \\\"name\\\": \\\"Horace Williams\\\",\\n      \\\"repositories\\\": {\\n        \\\"nodes\\\": [\\n          {\\n            \\\"name\\\": \\\"geoq\\\"\\n          },\\n          {\\n            \\\"name\\\": \\\"coque\\\"\\n          }\\n        ]\\n      }\\n    }\\n  }\\n}\\n\")))), mdx(\"hr\", null), mdx(Split, {\n    style: {\n      textAlign: \"left\",\n      alignItems: \"flex-start\"\n    },\n    mdxType: \"Split\"\n  }, mdx(\"div\", null, mdx(\"h2\", null, \"5. Interlude: GQL Type System\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GraphQL schemas are typed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Scalars:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Int\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Float\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Boolean\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"String\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ID (String but fancy)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Custom Scalars (String but even fancier, e.g. Date, UUID)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Enums (Server-defined)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lists\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fields can be nullable or not\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fields can reference scalars or other types\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"type Place {\\n  id: ID!\\n  name: String!\\n  address: String\\n  categoryIds: [Int]!\\n  latitude: Float!\\n  longitude: Float!\\n  highExistence: Boolean!\\n  chain: Chain\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"6. Interlude: Tooling\"), mdx(\"p\", null, \"GraphQL Schemas are represented as structured data, which makes sophisticated tooling possible.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/graphql/graphiql\"\n  }), \"GraphiQL\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/prisma-labs/graphql-playground\"\n  }), \"Prisma GraphQL Playground\"), \" (e.g. \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://graph.prod.factual.com/\"\n  }), \"Factual internal Graph API\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.github.com/v4/explorer/\"\n  }), \"Github V4 API Developer Playground\"), \" (Uses GraphiQL)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.apollographql.com/docs/react/\"\n  }), \"Apollo Client\"))), mdx(\"p\", null, \"Not technically part of core GraphQL (Spec describes query format, transport protocol, resolution logic, etc).\"), mdx(\"p\", null, \"But they are fairly ubiquitous and a common part of working with GraphQL.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Consuming GraphQL in practice = browsing interactive docs + writing queries\")), mdx(\"p\", null, \"We will practice this using the GitHub V4 API Explorer.\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Part 2: Workshop Time\"), mdx(\"h2\", null, \"Let's write some Queries\"), mdx(\"hr\", null), mdx(\"h2\", null, \"GitHub V4 API\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GitHub uses GraphQL for v4 of their developer API\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Has an interactive Playground UI at \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.github.com/v4/explorer/\"\n  }), \"https://developer.github.com/v4/explorer/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go there and sign in\")), mdx(\"img\", {\n    style: {\n      \"maxHeight\": \"75vh\"\n    },\n    src: \"https://www.dropbox.com/s/gochtw5l8qlu69o/Screenshot-2019-12-10-11-13-06.png?dl=1\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Playground Overview\"), mdx(\"img\", {\n    style: {\n      \"maxHeight\": \"75vh\"\n    },\n    src: \"https://www.dropbox.com/s/6vjubv1c1w8g1rc/Screenshot-2019-12-10-11-18-00.png?dl=1\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Exercise 1: Basic Query, no parameters\"), mdx(\"p\", null, \"Log in to GitHub explorer and query the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"viewer\"), \" field to get your own:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"login\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"location\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"name\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"email\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"employee status\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bio\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"avatarUrl\")), mdx(\"hr\", null), mdx(Split, {\n    style: {\n      textAlign: \"left\",\n      alignItems: \"flex-start\"\n    },\n    mdxType: \"Split\"\n  }, mdx(\"div\", null, mdx(\"h2\", null, \"Next Step: Parameters\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic syntax lets us read fields, but we also need to \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"provide input data\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Parameters can be accepted at any field in a GQL query (remember it is \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"JSON Filtering and Parameterization DSL\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Standard scalar types, or composites of these\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Used very frequently, so good to get used to them\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Examples: Search, Filtering, Pagination (very common in GitHub's API)\")))), mdx(\"h4\", null, \"REST Comparison\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Data that would go in a URL param or POST Body in a REST API goes in a parameter in GQL\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/users/123/repositories?limit=5\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"vs\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query { repositories(userId: 123, limit: 5) { name } }\"))), mdx(\"div\", null, mdx(\"h4\", null, \"Parameter Syntax:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"field(paramName: \\\"Value\\\")\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"query {\\n  viewer {\\n    organization(login:\\\"Factual\\\"){\\n      login\\n      location\\n    }\\n  }\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Exercise 2: Queries with Parameters\"), mdx(\"p\", null, \"Now that we know how to send query parameters, we can access much more of the schema!\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"user\"), \" field, look up your neighbor's github email, database ID, and the names of their first 10 repositories.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"organization\"), \" field, look up the name and login for the first 10 members of the Factual github org.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Using the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"organization\"), \" field, find Factual's 10 most-starred repositories\")), mdx(\"hr\", null), mdx(Split, {\n    style: {\n      textAlign: \"left\",\n      alignItems: \"flex-start\"\n    },\n    mdxType: \"Split\"\n  }, mdx(\"div\", null, mdx(\"h2\", null, \"Next Step: Mutations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mutation\"), \" is the second top-level field in a GQL schema (after \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"query\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"Mutations\\\" represent write operations (Create, Update, Delete)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Note that (like HTTP Verbs in REST) this is really just by convention\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Syntax is the same\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mutations are also fields and can return values like normal queries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Note in the GitHub API, most mutations require an ID as input, so you may need to first run a query to get the ID of the subject you want to interact with\"))), mdx(\"div\", null, mdx(\"h4\", null, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"mutation {\\n  followUser(input:{userId:\\\"MDQ6VXNlcjU3NzA2NjA=\\\"}) {\\n    user {\\n      viewerCanFollow\\n      viewerIsFollowing\\n    }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"{\\n  \\\"data\\\": {\\n    \\\"followUser\\\": {\\n      \\\"user\\\": {\\n        \\\"viewerCanFollow\\\": true,\\n        \\\"viewerIsFollowing\\\": true\\n      }\\n    }\\n  }\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Exercise 3: Mutations\"), mdx(\"p\", null, \"Use mutations in the GitHub API Explorer to:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Star a Repo (you can use \\\"worace/test-repo\\\" if you don't want to use another one)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Follow your neighbor\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add a reaction to \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/worace/test-repo/issues/1\"\n  }), \"this issue\"))), mdx(\"div\", {\n    style: {\n      fontSize: \"24px\"\n    }\n  }, mdx(\"h4\", null, \"Hint: Look up the ID using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"query {\\n  repository(name:\\\"test-repo\\\", owner:\\\"worace\\\") {\\n    issues(first:5){\\n      nodes {\\n        id\\n        title\\n      }\\n    }\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"Named Queries and Variables\"), mdx(\"p\", null, \"As your queries become more complex, you may want to re-use a query with different parameters.\"), mdx(\"p\", null, \"GraphQL supports this with \\\"named queries\\\" and variables:\"), mdx(Split, {\n    style: {\n      textAlign: \"left\",\n      alignItems: \"flex-start\"\n    },\n    mdxType: \"Split\"\n  }, mdx(\"div\", {\n    style: {\n      paddingRight: \"10px\"\n    }\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query IssuesForRepo($name: String!, $owner:String!){\\n  repository(name:$name, owner:$owner){\\n    issues(first:5){\\n      nodes {\\n        id\\n        title\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, \"with Variables:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\\"name\\\": \\\"test-repo\\\", \\\"owner\\\": \\\"worace\\\"}\\n\"))), mdx(\"div\", {\n    style: {\n      paddingLeft: \"10px\"\n    }\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"data\\\": {\\n    \\\"repository\\\": {\\n      \\\"issues\\\": {\\n        \\\"nodes\\\": [\\n          {\\n            \\\"id\\\": \\\"MDU6SXNzdWU1MzYwMDU2MDc=\\\",\\n            \\\"title\\\": \\\"Test Issue for Reactions\\\"\\n          }\\n        ]\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Named Queries are great because they integrate well with...\")))), mdx(\"hr\", null), mdx(Split, {\n    style: {\n      textAlign: \"left\",\n      alignItems: \"flex-start\"\n    },\n    mdxType: \"Split\"\n  }, mdx(\"div\", null, mdx(\"h3\", null, \"Programmatic Clients\"), mdx(\"p\", null, \"Explorer UIs like GraphiQL are great for discovery and experimentation.\"), mdx(\"p\", null, \"But for production use, you'll likely want to use a programmatic GraphQL client:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/github/graphql-client\"\n  }), \"github/graphql-client\"), \" (Ruby)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/graphql-python/gql\"\n  }), \"graphql-python/gql\"), \" (Python)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/prisma-labs/graphql-request\"\n  }), \"prisma-labs/graphql-request\"), \" (JS)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/apollographql/apollo-client\"\n  }), \"apollographql/apollo-client\"), \" (JS)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/Jarlakxen/drunk\"\n  }), \"Jarlakxen/drunk\"), \" (Scala)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(Or just use an HTTP client and roll your own!)\"))), mdx(\"div\", {\n    style: {\n      fontSize: \"18px\"\n    }\n  }, mdx(\"p\", null, \"Python Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"from gql import gql, Client\\nfrom gql.transport.requests import RequestsHTTPTransport\\n\\ntransport = RequestsHTTPTransport(\\n  url='http://graph.prod.factual.com/graphql',\\n  use_json=True\\n)\\n\\nclient = Client(\\n  transport=transport,\\n  fetch_schema_from_transport=True\\n)\\n\\nquery = gql(\\n  '''\\n  query($chain_id: String!) {\\n    search(filters: {country: \\\"us\\\", chainId: $chain_id}) {\\n      id\\n      name\\n    }\\n  }\\n  '''\\n)\\n\\nvars = {'chain_id': \\\"ab4a6b90-d68a-012e-5619-003048cad9da\\\"}\\n\\nclient.execute(\\n  query,\\n  variable_values = vars\\n)\\n\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Further Research / Advanced Topics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://graphql.org/learn/queries/#aliases\"\n  }), \"Query Aliases\"), \" (use the same field multiple times in one request, e.g. fetch multiple users at a time)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://graphql.org/learn/queries/#fragments\"\n  }), \"Fragments\"), \" (Re-use shared query logic between multiple queries)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://graphql.org/learn/schema/#interfaces\"\n  }), \"Interfaces\"), \" (Polymorphism in GraphQL type system)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=A5-H6MtTvqk\"\n  }), \"Error Handling\"), \" (Lots of ways; TL;DR errors can be returned at top level next to \\\"data\\\" and at sub-fields. Tries to return errors as values in the payload rather than giving HTTP 500).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/graphql/graphql-spec/blob/master/rfcs/Subscriptions.md\"\n  }), \"Subscriptions\"), \" (Stream graphql fields as real time events -- not finalized)\")), mdx(\"h2\", null, \"Broader Picture\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GraphQL Benefits\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Flexible field specific\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Typed Schema\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Standardized client-side tooling\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Costs?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Is GraphQL good?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Alternatives: \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"https://grpc.io/\"\n  }), \"gRPC\")), \", \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://twitter.github.io/finagle/\"\n  }), \"finagle\"), \", \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://swagger.io/docs/specification/about/\"\n  }), \"OpenAPI / Swagger\"), \", \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://jsonapi.org/\"\n  }), \"jsonapi.org\"), \", \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://capnproto.org/\"\n  }), \"Cap'n Proto\"))), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For new network services, we should think seriously about how to provide a typed and schematized interface, whether that's with GraphQL or some other tool.\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Closing - Go Play / Q&A\"), mdx(\"p\", null, \"Keep experimenting with queries in the GitHub Explorer. Or, here are some other GraphQL APIs to try:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://graph.prod.factual.com/graphql\"\n  }), \"Factual Graph API\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What's the place with highest placerank within 500m of the office (34.058679, -118.4165)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How many Pizza Huts (Chain ID \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ab4a6b90-d68a-012e-5619-003048cad9da\"), \") are there in the world? In the US?\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.yelp.com/developers/graphiql\"\n  }), \"Yelp\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://graphql.org/swapi-graphql/\"\n  }), \"SWAPI\"), \" (Example API using Star Wars data)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://graphql-pokemon.now.sh/\"\n  }), \"Pokemon API\"), \" (Ditto, but for Pokemon)\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"1c21c0e3-01d5-5eae-9cb8-9efed60a97db","slug":"","title":"Working with GraphQL Queries"}}}